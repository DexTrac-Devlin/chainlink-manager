#!/bin/bash

########################################################
#                Formatting Variables                  #
########################################################
b=$(tput bold)
n=$(tput sgr0)
un=$(tput smul)
nun=$(tput rmul)

########################################################
#                      Variables                       #
########################################################
IP_ADDRESS=$(ip route get 1.2.3.4 | awk '{print $7}')
VERSION="0.0.3"
CURRENT_DIR=$(pwd)

# $1 --> the desired release tag

########################################################
#                 INITIALIZE FUNCTION                  #
########################################################
Initialize () {
echo "test"
}

########################################################
#                  DEPLOY FUNCTION                     #
########################################################
Deploy () {
for file in *
do
    echo ""
    source "$file"
    if [ $OCR_STATUS = live ] ; then
        echo "    Deploying ${b}ocr-$file${n} at release ${b}$2${n}"
        cd $OCR_DIRECTORY
        echo "deploying new ocr-$file container at relase tag $2"
        docker run --name ocr-$file --restart unless-stopped -p $OCR_PORT:$OCR_PORT -p $OCR_LOG_PORT:6688 -p $OCR_GUI_PORT:6689 -v $OCR_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$1 local n -p /chainlink/.password
        echo "${b}Done.${n}"
        if [ $BOOTSTRAP_STATUS = live ] ; then
            echo ""
            echo "    Deploying ${b}bootstrap-$file${n} at release ${b}$2${n}"
            cd $BOOTSTRAP_DIRECTORY
            echo "deploying new ${b}bootstrap-$file${n} container at relase tag ${b}$2${n}"
            docker run --name bootstrap-$file --restart unless-stopped -p $BOOTSTRAP_PORT:$BOOTSTRAP_PORT -p $BOOTSTRAP_LOG_PORT:6688 -p $BOOTSTRAP_GUI_PORT:6689 -v $BOOTSTRAP_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$1 local n -p /chainlink/.password
            echo "${b}Done.${n}"
            if [ $KEEPER_STATUS = live ] ; then
                echo ""
                echo "    Deploying ${b}keeper-$file${n} at release ${b}$2${n}"
                echo "deploying new ${b}keeper-$file${n} container at relase tag ${b}$2${n}"
                docker run --name keeper-$file --restart unless-stopped -p $KEEPER_LOG_PORT:6688 -p $KEEPER_GUI_PORT:6689 -v $KEEPER_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$1 local n -p /chainlink/.password
                echo "${b}Done.${n}"
            else
                echo "No keeper node deployed for $file."
            fi
        else
            echo "No bootstrap node deployed for $file."
        fi
    else
        echo ""
        echo "$file is being held back."
    fi
done
}

########################################################
#                UPGRADE FUNCTION                      #
########################################################
Upgrade () {
cd networks

# UPGRADE ALL NETWORKS
if [ "$1" = all ] ; then
    # Upgrade all files in networks directory that have $STATUS = live
    for file in *
    do
        echo ""
        source "$file"
        if [ $OCR_STATUS = live ] ; then
            echo "    Upgrading ${b}ocr-$file${n} to release ${b}$2${n}"
            cd $OCR_DIRECTORY
            echo "Stopping and Removing ocr-$file container."
            docker stop ocr-$file
            docker rm ocr-$file
            echo "deploying new ocr-$file container at relase tag $2"
            docker run --name ocr-$file --restart unless-stopped -p $OCR_PORT:$OCR_PORT -p $OCR_LOG_PORT:6688 -p $OCR_GUI_PORT:6689 -v $OCR_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
            echo "${b}Done.${n}"
            if [ $BOOTSTRAP_STATUS = live ] ; then
                echo ""
                echo "    Upgrading ${b}bootstrap-$file${n} to release ${b}$2${n}"
                cd $BOOTSTRAP_DIRECTORY
                echo "Stopping and Removing bootstrap-$file container."
                docker stop bootstrap-$file
                docker rm bootstrap-$file
                echo "deploying new ${b}bootstrap-$file${n} container at relase tag ${b}$2${n}"
                docker run --name bootstrap-$file --restart unless-stopped -p $BOOTSTRAP_PORT:$BOOTSTRAP_PORT -p $BOOTSTRAP_LOG_PORT:6688 -p $BOOTSTRAP_GUI_PORT:6689 -v $BOOTSTRAP_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
                echo "${b}Done.${n}"
                if [ $KEEPER_STATUS = live ] ; then
                    echo ""
                    echo "    Upgrading ${b}keeper-$file${n} to release ${b}$2${n}"
                    cd $KEEPER_DIRECTORY
                    echo "Stopping and Removing keeper-$file container."
                    docker stop keeper-$file
                    docker rm keeper-$file
                    echo "deploying new ${b}keeper-$file${n} container at relase tag ${b}$2${n}"
                    docker run --name keeper-$file --restart unless-stopped -p $KEEPER_LOG_PORT:6688 -p $KEEPER_GUI_PORT:6689 -v $KEEPER_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
                    echo "${b}Done.${n}"
                else
                    echo "No keeper node deployed for $file."
                fi
            else
                echo "No bootstrap node deployed for $file."
            fi
        else
            echo ""
            echo "$file is being held back."
        fi
    done

# UPGRADE ALL LIVE NETWORKS
elif [ $1 = live ] ; then
    # Upgrade all files in networks directory that have $STATUS = live
    for file in *
    do
        echo ""
        source "$file"
        if [ $OCR_STATUS = live ] ; then
            echo "    Upgrading ${b}ocr-$file${n} to release ${b}$2${n}"
            cd $OCR_DIRECTORY
            echo "Stopping and Removing ocr-$file container."
            docker stop ocr-$file
            docker rm ocr-$file
            echo "deploying new ${b}ocr-$file${n} container at relase tag ${b}$2${n}"
            docker run --name ocr-$file --restart unless-stopped -p $OCR_PORT:$OCR_PORT -p $OCR_LOG_PORT:6688 -p $OCR_GUI_PORT:6689 -v $OCR_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
            echo "${b}Done.${n}"
            if [ $BOOTSTRAP_STATUS = live ] ; then
                echo ""
                echo "    Upgrading ${b}bootstrap-$file${n} to release ${b}$2${n}"
                cd $BOOTSTRAP_DIRECTORY
                echo "Stopping and Removing bootstrap-$file container."
                docker stop bootstrap-$file
                docker rm bootstrap-$file
                echo "deploying new bootstrap-$file container at relase tag $2"
                docker run --name bootstrap-$file --restart unless-stopped -p $BOOTSTRAP_PORT:$BOOTSTRAP_PORT -p $BOOTSTRAP_LOG_PORT:6688 -p $BOOTSTRAP_GUI_PORT:6689 -v $BOOTSTRAP_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
                echo "${b}Done.${n}"
                if [ $KEEPER_STATUS = live ] ; then
                    echo ""
                    echo "    Upgrading ${b}keeper-$file${n} to release ${b}$2${n}"
                    cd $KEEPER_DIRECTORY
                    echo "Stopping and Removing keeper-$file container."
                    docker stop keeper-$file
                    docker rm keeper-$file
                    echo "deploying new ${b}keeper-$file${n} container at relase tag ${b}$2${n}"
                    docker run --name keeper-$file --restart unless-stopped -p $KEEPER_LOG_PORT:6688 -p $KEEPER_GUI_PORT:6689 -v $KEEPER_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
                    echo "${b}Done.${n}"
                else
                    echo "No keeper node deployed for $file."
                fi
            else
                echo "No bootstrap node deployed for $file."
            fi
        else
            echo ""
            echo "$file is being held back."
        fi
    done

# UPGRADE ALL MAINNETS
elif [ $1 = mainnets ] ; then
    # Upgrade all files in networks directory that have a name ending in mainnet AND $STATUS = live
    for file in *-mainnet
    do
        echo "$file"
        source "$file"
        if [ $OCR_STATUS = live ] ; then
            echo "    Upgrading ${b}ocr-$file${n} to release ${b}$2${n}"
            cd $OCR_DIRECTORY
            echo "Stopping and Removing ocr-$file container."
            docker stop ocr-$file
            docker rm ocr-$file
            echo "deploying new ${b}ocr-$file${n} container at relase tag ${b}$2${n}"
            docker run --name ocr-$file --restart unless-stopped -p $OCR_PORT:$OCR_PORT -p $OCR_LOG_PORT:6688 -p $OCR_GUI_PORT:6689 -v $OCR_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
            echo "${b}Done.${n}"
            if [ $BOOTSTRAP_STATUS = live ] ; then
                echo ""
                echo "    Upgrading ${b}bootstrap-$file${n} to release ${b}$2${n}"
                cd $BOOTSTRAP_DIRECTORY
                docker run --name bootstrap-$file --restart unless-stopped -p $BOOTSTRAP_PORT:$BOOTSTRAP_PORT -p $BOOTSTRAP_LOG_PORT:6688 -p $BOOTSTRAP_GUI_PORT:6689 -v $BOOTSTRAP_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
                echo "${b}Done.${n}"
            else
                echo "No bootstrap node deployed for $file."
            fi
        else
            echo ""
            echo "$file is being held back."
        fi
    done

# UPGRADE ALL TESTNETS
elif [ $1 = testnets ] ; then
    # Upgrade all files in networks directory that have a name that does NOT end in mainnet AND $STATUS = live
    for file in *-testnet
    do
        echo ""
        echo "$file"
        source "$file"
        if [ $OCR_STATUS = live ] ; then
            echo "    Upgrading ${b}ocr-$file${n} to release ${b}$2${n}"
            cd $OCR_DIRECTORY
            echo "Stopping and Removing ocr-$file container."
            docker stop ocr-$file
            docker rm ocr-$file
            echo "deploying new ${b}ocr-$file${n} container at relase tag ${b}$2${n}"
            docker run --name ocr-$file --restart unless-stopped -p $OCR_PORT:$OCR_PORT -p $OCR_LOG_PORT:6688 -p $OCR_GUI_PORT:6689 -v $OCR_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
            echo "${b}Done.${n}"
            if [ $BOOTSTRAP_STATUS = live ] ; then
                echo ""
                echo "    Upgrading ${b}bootstrap-$file${n} to release ${b}$2${n}"
                cd $BOOTSTRAP_DIRECTORY
                echo "Stopping and Removing bootstrap-$file container."
                docker stop bootstrap-$file
                docker rm bootstrap-$file
                echo "deploying new ${b}bootstrap-$file${n} container at relase tag ${b}$2"
                docker run --name bootstrap-$file --restart unless-stopped -p $BOOTSTRAP_PORT:$BOOTSTRAP_PORT -p $BOOTSTRAP_LOG_PORT:6688 -p $BOOTSTRAP_GUI_PORT:6689 -v $BOOTSTRAP_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
                echo "${b}Done.${n}"
            else
                echo "No bootstrap node deployed for $file."
            fi
        else
            echo ""
            echo "$file is being held back."
        fi
    done

# UPGRADE TESTING CONTAINERS
elif [ $1 = testing ] ; then
    # PROMT USER FOR CONFIRMATION SINCE THIS WILL LIKELY BREAK SHIT
    read -p "${b}Are you sure? This upgrades all held back containers.  It is likely to break things if you have more than one held-back node.${n}" -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        exit 1
    fi
    read -p "${b}Are you confident this will not cause issues?  This is very likely to cause a bad day.${n}" -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        exit 1
    fi
    # Upgrade all files in networks directory that have $STATUS = testing
    for file in *
    do
        echo ""
        source "$file"
        if [ $OCR_STATUS = testing ] ; then
            echo "    Upgrading ${b}ocr-$file${n} to release ${b}$2${n}"
            cd $OCR_DIRECTORY
            echo "Stopping and Removing ocr-$file container."
            docker stop ocr-$file
            docker rm ocr-$file
            echo "deploying new ${b}ocr-$file${n} container at relase tag ${b}$2${n}"
            docker run --name ocr-$file --restart unless-stopped -p $OCR_PORT:$OCR_PORT -p $OCR_LOG_PORT:6688 -p $OCR_GUI_PORT:6689 -v $OCR_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
            echo "${b}Done.${n}"
            if [ $BOOTSTRAP_STATUS = testing ] ; then
                echo ""
                echo "    Upgrading ${b}bootstrap-$file${n} to release ${b}$2${n}"
                cd $BOOTSTRAP_DIRECTORY
                echo "Stopping and Removing bootstrap-$file container."
                docker stop bootstrap-$file
                docker rm bootstrap-$file
                echo "deploying new bootstrap-$file container at relase tag $2"
                docker run --name bootstrap-$file --restart unless-stopped -p $BOOTSTRAP_PORT:$BOOTSTRAP_PORT -p $BOOTSTRAP_LOG_PORT:6688 -p $BOOTSTRAP_GUI_PORT:6689 -v $BOOTSTRAP_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
                echo "${b}Done.${n}"
                if [ $KEEPER_STATUS = testing ] ; then
                    echo ""
                    echo "    Upgrading ${b}keeper-$file${n} to release ${b}$2${n}"
                    cd $KEEPER_DIRECTORY
                    echo "Stopping and Removing keeper-$file container."
                    docker stop keeper-$file
                    docker rm keeper-$file
                    echo "deploying new ${b}keeper-$file${n} container at relase tag ${b}$2${n}"
                    docker run --name keeper-$file --restart unless-stopped -p $KEEPER_LOG_PORT:6688 -p $KEEPER_GUI_PORT:6689 -v $KEEPER_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
                    echo "${b}Done.${n}"
                else
                    echo "No keeper node deployed for $file."
                fi
            else
                echo "No bootstrap node deployed for $file."
            fi
        else
            echo ""
            echo "$file is being held back."
        fi
    done
    echo ""

# A SINGLE NETWORK IS SPECIFIED
else
    echo ""
    echo "    Upgrading ${b}$1${n} to release tag ${b}$2${n}"
    source "$1"
    if [[ $1 = ocr-* ]]
    then
        cd $OCR_DIRECTORY
        echo "Stopping and Removing $1 container."
        docker stop $1
        docker rm $1
        echo "deploying new ${b}$1${n} container at relase tag ${b}$2${n}"
        docker run --name $1 --restart unless-stopped -p $OCR_PORT:$OCR_PORT -p $OCR_LOG_PORT:6688 -p $OCR_GUI_PORT:6689 -v $OCR_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/.password
        echo "${b}Done.${n}"
    elif [[ $1 = bootstrap-* ]]
    then
        cd $BOOTSTRAP_DIRECTORY
        echo "Stopping and Removing $1 container."
        docker stop $1
        docker rm $1
        docker run --name $1 --restart unless-stopped -p $BOOTSTRAP_PORT:$BOOTSTRAP_PORT -p $BOOTSTRAP_LOG_PORT:6688 -p $BOOTSTRAP_GUI_PORT:6689 -v $BOOTSTRAP_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/password
        echo "${b}Done.${n}"
    elif [[ $1 = keeper-* ]]
    then
        cd $KEEPER_DIRECTORY
        echo "Stopping and Removing $1 container."
        docker stop $1
        docker rm $1
        docker run --name $1 --restart unless-stopped -p $KEEPER_PORT:$KEEPER_PORT -p $KEEPER_LOG_PORT:6688 -p $KEEPER_GUI_PORT:6689 -v $KEEPER_DIRECTORY:/chainlink --env-file=.env -d smartcontract/chainlink:$2 local n -p /chainlink/password
        echo "${b}Done.${n}"
    else
        echo "Not supported."
        exit
    fi
fi

cd $CURRENT_DUR
}

########################################################
#                   LIST FUNCTION                      #
########################################################
List () {
tree networks
}

########################################################
#                   SHOW FUNCTION                      #
########################################################
Show () {
docker ps --all --filter "name=chainlink" --format "{{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}" \
            | (echo -e "CONTAINER_ID\tNAMES\tIMAGE\tPORTS\tSTATUS" && cat) \
            | awk '{printf "\033[1;32m%s\t\033[01;38;5;95;38;5;196m%s\t\033[00m\033[1;34m%s\t\033[01;90m%s %s %s %s %s %s %s\033[00m\n", $1, $2, $3, $4, $5, $6, $7, $8, $9, $10;}' \
            | column -s$'\t' -t \
            | awk 'NR<2{print $0;next}{print $0 | "sort --key=2"}'
}

########################################################
#                  VERSION FUNCTION                    #
########################################################
Version() {
# Print Version
echo "cl-manager version: ${b}$VERSION${n}"
}

########################################################
#                    HELP FUNCTION                     #
########################################################
Help() {
  # Display Help
  echo "This script helps you deploy, manage, and upgrade your Chainlink nodes."
  echo
  echo "Usage:  ${b}cl-anager option NETWORK_NAME CONTAINER_TAG${n}"
  echo ""
  echo "options:"
  echo ""
  echo "-i        Initializes a single host Chainlink host."
  echo "${b}            Installs Docker-CE, Creates Docker network, and deploys a PostgreSQL container,${n}"
  echo "${b}            use this if you want a quick turnkey deployment.${n}"
  echo ""
  echo "-d        Deploys new Chainlink Node(s)."
  echo "${b}            ex: cl-manager -d ocr-arbitrum-mainnet 1.3.0${n}"
  echo ""
  echo "-u        Upgrades Chainlink Nodes."
  echo "${b}            ex: cl-manager -u ocr-arbitrum-mainnet 1.3.0${n}"
  echo "${b}            ex: cl-manager -u all 1.3.0${n}"
  echo ""
  echo "-v        Print script version and exit."
  echo ""
  echo "-l        Print all locally supported Chainlink Networks."
  echo ""
  echo "-s        Print details of currently running Chainlink containers."
  echo ""
  echo "-h        Print this Help function and exit."
  echo
}

########################################################
#                        MAIN                          #
########################################################
while getopts ":id:u:lsvh" option; do
   case ${option} in
      i) # Initialize new Chainlink node host
         Initialize
         exit
         ;;
      d) # Deploy new Chainlink node(s)
         shift
         Deploy "$@"
         exit
         ;;
      u) # Upgrade existing Chainlink node(s)
         shift
         Upgrade "$@"
         exit
         ;;
      l) # List locally configured networks
         List
         exit
         ;;
      s) # Show details of currently running nodes
         Show
         exit
         ;;
      v) # Print Version
         Version
         exit
         ;;
      h) # Display Help
         Help
         exit
         ;;
      \?) # Invalid Option
         echo "Invalid option: $OPTARG" 1>&2
         exit 1
         ;;
      :) # Invalid Option
         echo "Invalid option: $OPTARG requires an argument" 1>&2
         echo ""
         echo "Please specify the desired network or tag, and the desired release tag." 1>&2
         echo "ex: cl-manager -$OPTARG arbitrum-mainnet 1.3.0" 1>&2
         exit 1
         ;;
   esac
done
